/*! responsive-nav.js 1.0.34, copyright (c) 2014 @misba, license */
(function (document, window, index) {
    "use strict";

    var supportsComputedStyle = !!window.getComputedStyle;

    function addEvent(element, event, callback, useCapture) {
        if ("addEventListener" in element) {
            element.addEventListener(event, callback, useCapture);
        } else if ("attachEvent" in element) {
            element.attachEvent("on" + event, function () {
                callback.call(element);
            });
        }
    }

    function removeEvent(element, event, callback, useCapture) {
        if ("removeEventListener" in element) {
            element.removeEventListener(event, callback, useCapture);
        } else if ("detachEvent" in element) {
            element.detachEvent("on" + event, callback);
        }
    }

    function getChildren(element) {
        var children = [];
        for (var i = 0; i < element.children.length; i++) {
            if (element.children[i].nodeType === 1) {
                children.push(element.children[i]);
            }
        }
        return children;
    }

    function setAttributes(element, attributes) {
        for (var key in attributes) {
            element.setAttribute(key, attributes[key]);
        }
    }

    function addClass(element, className) {
        if (element.className.indexOf(className) === -1) {
            element.className += " " + className;
            element.className = element.className.replace(/(^\s*)|(\s*$)/g, "");
        }
    }

    function removeClass(element, className) {
        var regex = new RegExp("(\\s|^)" + className + "(\\s|$)");
        element.className = element.className.replace(regex, " ").replace(/(^\s*)|(\s*$)/g, "");
    }

    function ResponsiveNav(element, options) {
        var wrapper, toggle, isOpen;

        var defaults = {
            animate: true,
            transition: 284,
            label: "Menu",
            insert: "before",
            customToggle: "",
            closeOnNavClick: false,
            openPos: "relative",
            navClass: "nav-collapse",
            navActiveClass: "js-nav-active",
            jsClass: "js",
            init: function () {},
            open: function () {},
            close: function () {}
        };

        for (var key in options) {
            defaults[key] = options[key];
        }
        options = defaults;

        init();

        this.destroy = destroy;
        this.toggle = toggleNav;

        function init() {
            wrapper = document.querySelector(element.replace("#", ""));
            wrapper.inner = getChildren(wrapper);

            addClass(document.documentElement, options.jsClass);
            addClass(wrapper, options.navClass);
            addClass(wrapper, options.navClass + "-" + index);
            addClass(wrapper, "closed");

            isOpen = false;

            createToggle();
            setupEvents();
            options.init();
        }

        function setupEvents() {
            addEvent(window, "resize", resize);
            addEvent(window, "focus", resize);
            addEvent(document.body, "touchmove", disablePointerEvents);
            addEvent(toggle, "touchstart", onTouchStart);
            addEvent(toggle, "touchend", onTouchEnd);
            addEvent(toggle, "mouseup", onTouchEnd);
            addEvent(toggle, "click", preventDefault);

            if (options.closeOnNavClick) {
                var navLinks = wrapper.getElementsByTagName("a");
                for (var i = 0; i < navLinks.length; i++) {
                    addEvent(navLinks[i], "click", toggleNav);
                }
            }
        }

        function createToggle() {
            if (options.customToggle) {
                toggle = document.querySelector(options.customToggle.replace("#", ""));
            } else {
                toggle = document.createElement("a");
                toggle.innerHTML = options.label;
                setAttributes(toggle, { href: "#", "class": "nav-toggle" });
                if (options.insert === "before") {
                    wrapper.parentNode.insertBefore(toggle, wrapper);
                } else {
                    wrapper.parentNode.insertBefore(toggle, wrapper.nextSibling);
                }
            }
        }

        function destroy() {
            removeClass(document.documentElement, options.jsClass);
            removeClass(wrapper, options.navClass);
            removeClass(wrapper, options.navClass + "-" + index);
            removeClass(document.documentElement, options.navActiveClass);
            wrapper.removeAttribute("style");
            wrapper.removeAttribute("aria-hidden");

            removeEvent(window, "resize", resize);
            removeEvent(window, "focus", resize);
            removeEvent(document.body, "touchmove", disablePointerEvents);
            removeEvent(toggle, "touchstart", onTouchStart);
            removeEvent(toggle, "touchend", onTouchEnd);
            removeEvent(toggle, "mouseup", onTouchEnd);
            removeEvent(toggle, "click", preventDefault);

            if (!options.customToggle) {
                toggle.parentNode.removeChild(toggle);
            }
        }

        function toggleNav() {
            if (isOpen) {
                closeNav();
            } else {
                openNav();
            }
            enablePointerEvents();
        }

        function openNav() {
            removeClass(wrapper, "closed");
            addClass(wrapper, "opened");
            addClass(document.documentElement, options.navActiveClass);
            addClass(toggle, "active");
            wrapper.style.position = options.openPos;
            wrapper.setAttribute("aria-hidden", "false");
            isOpen = true;
            options.open();
        }

        function closeNav() {
            addClass(wrapper, "closed");
            removeClass(wrapper, "opened");
            removeClass(document.documentElement, options.navActiveClass);
            removeClass(toggle, "active");
            wrapper.setAttribute("aria-hidden", "true");
            if (options.animate) {
                isOpen = false;
                setTimeout(function () {
                    wrapper.style.position = "absolute";
                    isOpen = true;
                }, options.transition + 10);
            } else {
                wrapper.style.position = "absolute";
                isOpen = false;
            }
            options.close();
        }

        function resize() {
            if (window.getComputedStyle(toggle, null).getPropertyValue("display") !== "none") {
                isOpen = true;
                wrapper.setAttribute("aria-hidden", "true");
                wrapper.style.position = options.openPos;
                removeClass(wrapper, "closed");
                options.animate ? setTimeout(calcHeight, options.transition) : calcHeight();
            } else {
                isOpen = false;
                wrapper.setAttribute("aria-hidden", "false");
                wrapper.style.position = "absolute";
                addClass(wrapper, "closed");
                removeClass(wrapper, "opened");
                wrapper.removeAttribute("style");
            }
        }

        function onTouchStart(event) {
            event.preventDefault();
            addClass(document.body, "disable-pointer-events");
            this.startX = event.touches[0].clientX;
            this.startY = event.touches[0].clientY;
            this.touchHasMoved = false;
            removeEvent(toggle, "mouseup", onTouchEnd);
        }

        function onTouchEnd(event) {
            if (!options.customToggle) {
                toggle.setAttribute("aria-hidden", "false");
            }
            if (isOpen) {
                closeNav();
            } else {
                if (event.type === "touchend") return toggleNav();
                var evt = event || window.event;
                if (evt.which === 3 || evt.button === 2) return;
                toggleNav();
            }
        }

        function disablePointerEvents() {
            addClass(document.body, "disable-pointer-events");
            removeEvent(toggle, "mouseup", onTouchEnd);
        }

        function preventDefault(e) {
            e.preventDefault ? (e.stopImmediatePropagation && e.stopImmediatePropagation(), e.preventDefault(), e.stopPropagation()) : e.returnValue = false;
        }

        function enablePointerEvents() {
            removeClass(document.body, "disable-pointer-events");
        }

        function calcHeight() {
            var a = 0;
            for (var b = 0; b < wrapper.inner.length; b++) {
                a += wrapper.inner[b].offsetHeight;
            }
            var c = "." + options.jsClass + " ." + options.navClass + "-" + index + ".opened{max-height:" + a + "px !important} ." + options.jsClass + " .disable-pointer-events{pointer-events:none !important} ." + options.jsClass + " ." + options.navClass + "-" + index + ".opened.dropdown-active {max-height:9999px !important}";
            t.styleSheet ? t.styleSheet.cssText = c : t.innerHTML = c;
            c = "";
        }
    }

    window.responsiveNav = function (navEl, options) {
        return new ResponsiveNav(navEl, options);
    };
})(document, window, 0);
